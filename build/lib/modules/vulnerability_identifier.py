# modules/vulnerability_identifier.py
from .base_module import BaseModule
from core.database_manager import DatabaseManager
import logging

class VulnerabilityIdentifier(BaseModule):
    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(self.name)
        # Create a single DB manager instance to reuse the connection
        self.db_manager = DatabaseManager()

    def run(self, target, ports=None, previous_results=None):
        """
        Identifies vulnerabilities by searching for keywords from discovered services.
        This version is more robust and handles different data structures.
        """
        if not previous_results:
            return "Skipping, no previous results to analyze."
            
        port_scan_results = previous_results.get('port_scanner', {})
        if not port_scan_results or not isinstance(port_scan_results, dict):
             return "Skipping, no valid port scan data found."

        all_found_vulns = {}
        
        # --- FIX: Correctly extract service keywords from the detailed port scan data ---
        search_keywords = set()
        for host, host_data in port_scan_results.items():
            if isinstance(host_data, dict) and 'ports' in host_data:
                for port_info in host_data['ports']:
                    # Use product name if available, otherwise fall back to service name
                    product = port_info.get('product', '').strip()
                    name = port_info.get('name', '').strip()
                    if product:
                        search_keywords.add(product)
                    elif name:
                        search_keywords.add(name)
        
        if not search_keywords:
            return "Could not extract any service keywords from the port scan."

        # Query the database for each unique service keyword
        for keyword in search_keywords:
            if not keyword: continue
            
            self.logger.info(f"Searching for CVEs related to '{keyword}'")
            vulns = self.db_manager.query_vulnerabilities(keyword, min_severity="MEDIUM")
            if vulns:
                # Use the keyword as the key in the results dictionary
                all_found_vulns[keyword] = vulns
                
        return all_found_vulns if all_found_vulns else "No relevant vulnerabilities found in the local database."
