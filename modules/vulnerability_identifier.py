from .base_module import BaseModule
from core.database_manager import DatabaseManager
import logging

class VulnerabilityIdentifier(BaseModule):
    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(self.name)

    def run(self, target, ports=None, previous_results=None):
        """
        Identifies vulnerabilities using detailed service and version information.
        """
        # This module now relies on the detailed output from the new port_scanner
        if not previous_results or not any(isinstance(val, dict) and 'ports' in val for val in previous_results.values()):
             return "Skipping, no detailed port scan data found."

        db_manager = DatabaseManager()
        all_found_vulns = {}
        
        # The previous_results from the port scanner are now structured like: {'10.0.2.15': {'ports': [...]}}
        for host, host_data in previous_results.items():
            if 'ports' not in host_data:
                continue

            for port_info in host_data['ports']:
                if port_info['state'] != 'open':
                    continue

                # Create a list of search terms, from most specific to least
                search_terms = []
                product = port_info.get('product')
                version = port_info.get('version')
                name = port_info.get('name')

                if product and version:
                    # e.g., "Apache httpd 2.4.29"
                    search_terms.append(f"{product} {version}")
                if product:
                    # e.g., "Apache httpd"
                    search_terms.append(product)
                if name:
                    # e.g., "http"
                    search_terms.append(name)
                
                # Remove duplicates while preserving order
                unique_terms = list(dict.fromkeys(search_terms))
                self.logger.info(f"Searching for vulnerabilities with terms: {unique_terms}")

                for term in unique_terms:
                    # Search for vulnerabilities containing the term with at least MEDIUM severity
                    vulns = db_manager.query_vulnerabilities(term, min_severity="MEDIUM")
                    if vulns:
                        # If we find vulnerabilities for a specific term, we add them and stop searching for this service
                        self.logger.info(f"Found {len(vulns)} vulnerabilities for '{term}' on port {port_info['port']}")
                        service_key = f"{port_info['port']}/{term}"
                        all_found_vulns[service_key] = vulns
                        break # Move to the next port/service
                        
        return all_found_vulns if all_found_vulns else "No relevant vulnerabilities found in the local database."
