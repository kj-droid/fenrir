import json
import logging


class VulnerabilityIdentifier:
    def __init__(self, db_path="data/nvd_local_db.json", severity_threshold="LOW"):
        """
        Initialize the Vulnerability Identifier.
        :param db_path: Path to the local NVD database file.
        :param severity_threshold: Minimum severity level for reporting (LOW, MEDIUM, HIGH, CRITICAL).
        """
        self.db_path = db_path
        self.severity_threshold = severity_threshold
        self.logger = logging.getLogger("VulnerabilityIdentifier")
        logging.basicConfig(level=logging.INFO)

        # Severity level mapping
        self.severity_map = {"LOW": 1, "MEDIUM": 2, "HIGH": 3, "CRITICAL": 4}

    def query_local_db(self, software_name):
        """
        Query the local NVD database for vulnerabilities related to the given software.
        :param software_name: Name of the software to search for.
        :return: List of matching vulnerabilities.
        """
        self.logger.info(f"Querying local database for vulnerabilities in {software_name}...")
        try:
            with open(self.db_path, "r") as file:
                db_data = json.load(file)

            matches = []
            for cve in db_data.get("CVE_Items", []):
                description = cve.get("cve", {}).get("description", {}).get("description_data", [{}])[0].get("value", "")
                severity = cve.get("impact", {}).get("baseMetricV3", {}).get("cvssV3", {}).get("baseSeverity", "LOW")

                if software_name.lower() in description.lower() and self.severity_map[severity] >= self.severity_map[self.severity_threshold]:
                    matches.append({
                        "id": cve.get("cve", {}).get("CVE_data_meta", {}).get("ID", ""),
                        "description": description,
                        "severity": severity,
                        "references": [ref.get("url", "") for ref in cve.get("cve", {}).get("references", {}).get("reference_data", [])]
                    })

            self.logger.info(f"Found {len(matches)} vulnerabilities for {software_name}.")
            return matches
        except Exception as e:
            self.logger.error(f"Error querying local database: {e}")
            return []

    def query_online_source(self, software_name):
        """
        Query an online source for vulnerabilities related to the given software.
        This is a placeholder function for future integration with online APIs (e.g., Vulners, NVD).
        :param software_name: Name of the software to search for.
        :return: List of matching vulnerabilities.
        """
        self.logger.info(f"Querying online sources for vulnerabilities in {software_name}...")
        # Placeholder for API integration
        return []

    def identify_vulnerabilities(self, software_name, use_online=False):
        """
        Identify vulnerabilities for a specific software using the local database or online sources.
        :param software_name: Name of the software to search for.
        :param use_online: Whether to use online sources if local search is insufficient.
        :return: List of vulnerabilities.
        """
        vulnerabilities = self.query_local_db(software_name)
        if not vulnerabilities and use_online:
            vulnerabilities = self.query_online_source(software_name)
        return vulnerabilities


if __name__ == "__main__":
    # Example usage
    identifier = VulnerabilityIdentifier()

    # Query for vulnerabilities related to Apache
    results = identifier.identify_vulnerabilities("Apache", use_online=False)
    for vuln in results:
        print(f"CVE ID: {vuln['id']}")
        print(f"Description: {vuln['description']}")
        print(f"Severity: {vuln['severity']}")
        print(f"References: {', '.join(vuln['references'])}\n")
